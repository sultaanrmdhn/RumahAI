
import React from 'react';

const Spinner: React.FC<{message?: string}> = ({ message = 'Generating your masterpiece...' }) => (
    <div className="flex flex-col items-center justify-center space-y-4">
        <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500"></div>
        <p className="text-lg text-gray-300">{message}</p>
        <p className="text-sm text-gray-500">This may take a moment.</p>
    </div>
);

const Placeholder: React.FC = () => (
    <div className="text-center text-gray-500">
        <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-24 w-24 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        <h3 className="mt-2 text-lg font-medium">Image Display Area</h3>
        <p className="mt-1 text-sm">Your generated image will appear here.</p>
    </div>
);

const ErrorDisplay: React.FC<{ message: string }> = ({ message }) => (
    <div className="text-center text-red-400 bg-red-900/20 p-6 rounded-lg border border-red-500/50">
        <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h3 className="mt-2 text-lg font-semibold">An Error Occurred</h3>
        <p className="mt-1 text-sm max-w-sm mx-auto">{message}</p>
    </div>
);

const DownloadIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={className}>
        <path fillRule="evenodd" d="M12 2.25a.75.75 0 01.75.75v11.69l3.22-3.22a.75.75 0 111.06 1.06l-4.5 4.5a.75.75 0 01-1.06 0l-4.5-4.5a.75.75 0 111.06-1.06l3.22 3.22V3a.75.75 0 01.75-.75zm-9 13.5a.75.75 0 01.75.75v2.25a1.5 1.5 0 001.5 1.5h13.5a1.5 1.5 0 001.5-1.5V16.5a.75.75 0 011.5 0v2.25a3 3 0 01-3 3H5.25a3 3 0 01-3-3V16.5a.75.75 0 01.75-.75z" clipRule="evenodd" />
    </svg>
);

const ArrowUpOnSquareIcon: React.FC<{ className?: string }> = ({ className }) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className={className}>
        <path fillRule="evenodd" d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25Zm.53 5.47a.75.75 0 0 0-1.06 0l-3 3a.75.75 0 1 0 1.06 1.06l1.72-1.72v5.69a.75.75 0 0 0 1.5 0v-5.69l1.72 1.72a.75.75 0 1 0 1.06-1.06l-3-3Z" clipRule="evenodd" />
    </svg>
);

interface ImageDisplayProps {
  imageUrl: string | null;
  isLoading: boolean;
  isUpscaling: boolean;
  error: string | null;
  onUpscale: (factor: number) => void;
}

export const ImageDisplay: React.FC<ImageDisplayProps> = ({ imageUrl, isLoading, isUpscaling, error, onUpscale }) => {
  const handleDownload = () => {
    if (!imageUrl) return;
    const link = document.createElement('a');
    link.href = imageUrl;
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    link.download = `imagen-4-generated-${timestamp}.jpg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (isLoading || isUpscaling) {
    return <Spinner message={isUpscaling ? 'Upscaling your image...' : 'Generating your masterpiece...'} />;
  }

  if (error) {
    return <ErrorDisplay message={error} />;
  }

  if (imageUrl) {
    return (
        <div className="relative w-full h-full group">
            <img 
                src={imageUrl} 
                alt="Generated by AI" 
                className="w-full h-full object-contain rounded-lg shadow-lg"
            />
            <div className="absolute bottom-4 right-4 flex items-center gap-2 transition-all duration-300 opacity-0 group-hover:opacity-100 focus-within:opacity-100">
                <div className="flex bg-gray-900/50 backdrop-blur-sm rounded-full">
                    <button
                        onClick={() => onUpscale(2)}
                        aria-label="Upscale image 2x"
                        disabled={isUpscaling}
                        className="text-white px-4 py-3 rounded-l-full hover:bg-indigo-600/80 flex items-center gap-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-wait transition-colors"
                    >
                        <ArrowUpOnSquareIcon className="w-5 h-5" />
                        <span className="text-sm font-semibold">2x</span>
                    </button>
                    <div className="w-px bg-gray-500/50"></div>
                     <button
                        onClick={() => onUpscale(4)}
                        aria-label="Upscale image 4x"
                        disabled={isUpscaling}
                        className="text-white px-4 py-3 rounded-r-full hover:bg-indigo-600/80 flex items-center gap-2 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-wait transition-colors"
                    >
                        <ArrowUpOnSquareIcon className="w-5 h-5" />
                        <span className="text-sm font-semibold">4x</span>
                    </button>
                </div>
                <button
                    onClick={handleDownload}
                    aria-label="Download image"
                    className="bg-gray-900/50 text-white p-3 rounded-full hover:bg-indigo-600/80 backdrop-blur-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500"
                >
                    <DownloadIcon className="w-6 h-6" />
                </button>
            </div>
        </div>
    );
  }

  return <Placeholder />;
};